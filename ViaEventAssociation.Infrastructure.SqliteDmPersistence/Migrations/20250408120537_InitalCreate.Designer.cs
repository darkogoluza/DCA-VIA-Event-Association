// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ViaEventAssociation.Infrastructure.SqliteDmPersistence;

#nullable disable

namespace ViaEventAssociation.Infrastructure.SqliteDmPersistence.Migrations
{
    [DbContext(typeof(SqliteDmContext))]
    [Migration("20250408120537_InitalCreate")]
    partial class InitalCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.Events.Entities.Location", b =>
                {
                    b.Property<Guid>("locationId")
                        .HasColumnType("TEXT");

                    b.HasKey("locationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.Events.Entities.VeaEvent", b =>
                {
                    b.Property<Guid>("VeaEventId")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime?>("_endDateTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("endDateTime");

                    b.Property<DateTime?>("_startDateTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("startDateTime");

                    b.Property<bool?>("_visibility")
                        .HasColumnType("INTEGER")
                        .HasColumnName("visibility");

                    b.ComplexProperty<Dictionary<string, object>>("_eventStatusType", "VIAEventAssociation.Core.Domain.Aggregates.Events.Entities.VeaEvent._eventStatusType#EventStatusType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("backingValue")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("eventStatusType");
                        });

                    b.HasKey("VeaEventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.Guests.Entities.Guest", b =>
                {
                    b.Property<Guid>("GuestId")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("_profilePictureUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("profilePictureUrl");

                    b.Property<Guid?>("eventId")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("_email", "VIAEventAssociation.Core.Domain.Aggregates.Guests.Entities.Guest._email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("_firstName", "VIAEventAssociation.Core.Domain.Aggregates.Guests.Entities.Guest._firstName#FirstName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("firstName");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("_lastName", "VIAEventAssociation.Core.Domain.Aggregates.Guests.Entities.Guest._lastName#LastName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("lastName");
                        });

                    b.HasKey("GuestId");

                    b.HasIndex("eventId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.Invitations.Entities.Invitation", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("eventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("inviteeId")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("_statusType", "VIAEventAssociation.Core.Domain.Aggregates.Invitations.Entities.Invitation._statusType#StatusType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("backingValue")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("statusType");
                        });

                    b.HasKey("InvitationId");

                    b.HasIndex("eventId");

                    b.HasIndex("inviteeId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.RequestsToJoin.Entities.RequestToJoin", b =>
                {
                    b.Property<Guid>("RequestToJoinId")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid?>("invitorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("veaEventId")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("_reason", "VIAEventAssociation.Core.Domain.Aggregates.RequestsToJoin.Entities.RequestToJoin._reason#Reasion", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("reason");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("_statusType", "VIAEventAssociation.Core.Domain.Aggregates.RequestsToJoin.Entities.RequestToJoin._statusType#StatusType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("backingValue")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("statusType");
                        });

                    b.HasKey("RequestToJoinId");

                    b.HasIndex("invitorId");

                    b.HasIndex("veaEventId");

                    b.ToTable("RequestToJoins");
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.Events.Entities.Location", b =>
                {
                    b.HasOne("VIAEventAssociation.Core.Domain.Aggregates.Events.Entities.VeaEvent", null)
                        .WithOne("_location")
                        .HasForeignKey("VIAEventAssociation.Core.Domain.Aggregates.Events.Entities.Location", "locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.Events.Entities.VeaEvent", b =>
                {
                    b.OwnsOne("VIAEventAssociation.Core.Domain.Aggregates.Events.Values.Description", "_description", b1 =>
                        {
                            b1.Property<Guid>("VeaEventId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("description");

                            b1.HasKey("VeaEventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("VeaEventId");
                        });

                    b.OwnsOne("VIAEventAssociation.Core.Domain.Aggregates.Events.Values.MaxNoOfGuests", "_maxNoOfGuests", b1 =>
                        {
                            b1.Property<Guid>("VeaEventId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Value")
                                .HasColumnType("INTEGER")
                                .HasColumnName("maxNoOfGuests");

                            b1.HasKey("VeaEventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("VeaEventId");
                        });

                    b.OwnsOne("VIAEventAssociation.Core.Domain.Aggregates.Events.Values.Title", "_title", b1 =>
                        {
                            b1.Property<Guid>("VeaEventId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("title");

                            b1.HasKey("VeaEventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("VeaEventId");
                        });

                    b.Navigation("_description");

                    b.Navigation("_maxNoOfGuests");

                    b.Navigation("_title");
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.Guests.Entities.Guest", b =>
                {
                    b.HasOne("VIAEventAssociation.Core.Domain.Aggregates.Events.Entities.VeaEvent", null)
                        .WithMany("_guests")
                        .HasForeignKey("eventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.Invitations.Entities.Invitation", b =>
                {
                    b.HasOne("VIAEventAssociation.Core.Domain.Aggregates.Events.Entities.VeaEvent", null)
                        .WithMany("_invitations")
                        .HasForeignKey("eventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VIAEventAssociation.Core.Domain.Aggregates.Guests.Entities.Guest", null)
                        .WithMany()
                        .HasForeignKey("inviteeId");
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.RequestsToJoin.Entities.RequestToJoin", b =>
                {
                    b.HasOne("VIAEventAssociation.Core.Domain.Aggregates.Guests.Entities.Guest", null)
                        .WithMany()
                        .HasForeignKey("invitorId");

                    b.HasOne("VIAEventAssociation.Core.Domain.Aggregates.Events.Entities.VeaEvent", null)
                        .WithMany()
                        .HasForeignKey("veaEventId");
                });

            modelBuilder.Entity("VIAEventAssociation.Core.Domain.Aggregates.Events.Entities.VeaEvent", b =>
                {
                    b.Navigation("_guests");

                    b.Navigation("_invitations");

                    b.Navigation("_location");
                });
#pragma warning restore 612, 618
        }
    }
}
